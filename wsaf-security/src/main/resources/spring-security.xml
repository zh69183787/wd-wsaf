<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:c="http://www.springframework.org/schema/c"
	xmlns:util="http://www.springframework.org/schema/util"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:security="http://www.springframework.org/schema/security"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.1.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.1.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd
		http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-3.1.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.1.xsd">

	<!--==========================================================================
	使用标注拦截业务层方法
	============================================================================-->
	<security:global-method-security pre-post-annotations="enabled" />

	<!--==========================================================================
	SpringSecurity核心过滤器组
	FilterChainProxy会按顺序来调用这些filter,使这些filter能享用Spring Ioc的功能,   
	============================================================================-->
	<bean id="springSecurityFilterChain" class="org.springframework.security.web.FilterChainProxy">
		<security:filter-chain-map request-matcher="ant" >
			<security:filter-chain pattern="/**" filters="
			   channelProcessingFilter,
	           concurrencyFilter,
	           securityContextPersistenceFilter,
	           logoutFilter,
	           validatedUsernamePasswordProcessingFilter,
	           exceptionTranslationFilter,
	           authenticationFilter" />
		</security:filter-chain-map>
	</bean>
	
	<!-- 自定义权限认证过滤器 -->
    <bean id="authenticationFilter" class="com.wonders.frame.security.filter.CustomAuthenticationFilter"/>

	<!--==========================================================================
	核心过滤器成员之一
	常用来将某些HTTP协议的URL重定向到HTTPS协议
	============================================================================-->
	<bean id="channelProcessingFilter" class="org.springframework.security.web.access.channel.ChannelProcessingFilter">
		<property name="channelDecisionManager" ref="channelDecisionManager" />
		<property name="securityMetadataSource">
			<security:filter-security-metadata-source request-matcher="ant">
				<security:intercept-url pattern="/**" access="ANY_CHANNEL" />
			</security:filter-security-metadata-source>
		</property>
	</bean>

	<bean id="channelDecisionManager"
		class="org.springframework.security.web.access.channel.ChannelDecisionManagerImpl">
		<property name="channelProcessors">
			<list>
				<ref local="secureChannelProcessor" />
				<ref local="insecureChannelProcessor" />
			</list>
		</property>
	</bean>

	<bean id="secureChannelProcessor" class="org.springframework.security.web.access.channel.SecureChannelProcessor" />
	<bean id="insecureChannelProcessor" class="org.springframework.security.web.access.channel.InsecureChannelProcessor" />

	<!--==========================================================================
	核心过滤器成员之一
	HttpSession并发过滤器
	============================================================================-->
	<bean id="concurrencyFilter" class="org.springframework.security.web.session.ConcurrentSessionFilter">
		<property name="sessionRegistry" ref="sessionRegistry" />
		<property name="expiredUrl" value="/common/session-expired" />
	</bean>

	<bean id="sessionRegistry" class="org.springframework.security.core.session.SessionRegistryImpl" />

	<bean id="sas" class="org.springframework.security.web.authentication.session.ConcurrentSessionControlStrategy">
		<constructor-arg index="0" ref="sessionRegistry" />
		<property name="maximumSessions" value="1" />
	</bean>

	<!--==========================================================================
	核心过滤器成员之一
	获取或存储一个SecurityContext
	============================================================================-->
	<bean id="securityContextPersistenceFilter" class="org.springframework.security.web.context.SecurityContextPersistenceFilter" />

	<!--==========================================================================
	核心过滤器成员之一
	监控一个实现退出功能的URL,退出(Logout)过滤器 退出登录操作
	============================================================================-->
    <bean id="logoutFilter" class="org.springframework.security.web.authentication.logout.LogoutFilter">
		<constructor-arg index="0" value="/common/login" />
		<constructor-arg index="1">
			<array>
				<ref local="logoutHandler" />
			</array>
		</constructor-arg>
		<property name="filterProcessesUrl" value="/common/logout"/>
	</bean>

	<!-- 这个Bean注入到logoutFilter中去，它实际负责最后的扫尾工作，如把HttpSession实例删除 -->
	<bean id="logoutHandler" class="org.springframework.security.web.authentication.logout.SecurityContextLogoutHandler">
		<property name="invalidateHttpSession" value="true" />
	</bean>

	<!--==========================================================================
	核心过滤器成员之一
	监控一个URL，验证用户提交的用户名和密码
	============================================================================-->
	<bean id="validatedUsernamePasswordProcessingFilter" class="com.wonders.frame.security.filter.ValidatedUsernamePasswordAuthenticationFilter">
		<property name="filterProcessesUrl" value="/common/login-process"/>
		<property name="usernameParameter" value="username"/>
		<property name="passwordParameter" value="password"/>
		<property name="authenticationManager" ref="customAuthenticationManager"/>
		<property name="authenticationSuccessHandler" ref="authenticationSuccessHandler" />
		<property name="authenticationFailureHandler" ref="authenticationFailureHandler" />
		<property name="sessionAuthenticationStrategy" ref="sas" />
	</bean>

	<!-- defaultTargetUrl  义登录成功时转向的页面 -->
	<bean id="authenticationSuccessHandler" class="org.springframework.security.web.authentication.SavedRequestAwareAuthenticationSuccessHandler">
		<property name="defaultTargetUrl" value="/user/my-information" />
	</bean>

	<bean id="authenticationFailureHandler" class="org.springframework.security.web.authentication.SimpleUrlAuthenticationFailureHandler">
		<property name="defaultFailureUrl" value="/common/login"/>
		<property name="useForward" value="true" />
	</bean>

	<!--==========================================================================
	核心过滤器成员之一
	解决因为权限和验证问题而引发的异常
	============================================================================-->
	<bean id="exceptionTranslationFilter" class="org.springframework.security.web.access.ExceptionTranslationFilter">
		<property name="authenticationEntryPoint" ref="authenticationEntryPoint" />
		<property name="accessDeniedHandler" ref="accessDeniedHandler" />
	</bean>

	<bean id="authenticationEntryPoint" class="org.springframework.security.web.authentication.LoginUrlAuthenticationEntryPoint">
		<property name="useForward" value="false" />
		<property name="loginFormUrl" value="/common/login" />
	</bean>

    <!--否认登录页面  -->
	<bean id="accessDeniedHandler" class="org.springframework.security.web.access.AccessDeniedHandlerImpl">
		<property name="errorPage" value="/WEB-INF/jsp/error/access-denied.jsp"/>
	</bean>


    <!-- 用户自定义认证管理器 -->
   <bean id="customAuthenticationManager" class="org.springframework.security.authentication.ProviderManager">
		<property name="authenticationEventPublisher" ref="defaultAuthEventPublisher"/>
		<property name="providers">
			<list>
				<ref local="daoAuthenticationProvider"/>
			</list>
		</property>
	</bean>

	<bean id="defaultAuthEventPublisher" class="org.springframework.security.authentication.DefaultAuthenticationEventPublisher"/>

<!-- 	<bean id="daoAuthenticationProvider" class="org.springframework.security.authentication.dao.DaoAuthenticationProvider"> -->
<!-- 		<property name="passwordEncoder" ref="md5PasswordEncoder"/> -->
<!-- 		<property name="userDetailsService" ref="userDetailsService" /> -->
<!-- 	</bean> -->
	
	<bean id="daoAuthenticationProvider" class="org.springframework.security.authentication.dao.DaoAuthenticationProvider">
		<property name="userDetailsService" ref="userDetailService" />
	</bean>
	
	<bean id="userDetailService" class="com.wonders.frame.security.service.impl.UserDetailServiceImpl"/>
		

    <!-- 对密码进行md5加密 -->
<!-- 	<bean id="md5PasswordEncoder" class="org.springframework.security.authentication.encoding.Md5PasswordEncoder" /> -->

<!--     <bean id="currentUserHolder" class="com.wonders.frame.console.support.CurrentUserHolder"> -->
<!--         <constructor-arg name="entityManagerFactory" ref="entityManagerFactory"/> -->
<!--     </bean> -->
</beans>
